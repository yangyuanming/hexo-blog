[{"title":"maven生命周期和插件","url":"http://yangyuanming.com/post/b37b3bbf.html","content":"<h2 id=\"maven生命周期\"><a href=\"#maven生命周期\" class=\"headerlink\" title=\"maven生命周期\"></a>maven生命周期</h2><p>maven抽象出了3套生命周期，其具体实现是依赖于<a href=\"http://maven.apache.org/plugins/index.html\" target=\"_blank\" rel=\"noopener\">maven插件</a>。每套生命周期是相互独立的，都由一组阶段(Phase)组成。每套生命周期中的阶段是有顺序的，后面阶段依赖于前面的阶段，执行后面阶段会自动执行之前的阶段，但不会触发不同生命周期的阶段。</p>\n<p><strong>下面是三个生命周期及其包含的阶段。</strong></p>\n<h3 id=\"Clean-Lifecycle\"><a href=\"#Clean-Lifecycle\" class=\"headerlink\" title=\"Clean Lifecycle\"></a>Clean Lifecycle</h3><p>清理项目，在进行真正的构建之前进行一些清理工作。</p>\n<ul>\n<li><p>pre-clean     执行clean前需要完成的工作  </p>\n</li>\n<li><p>clean     clean上一次构建生成的所有文件  </p>\n</li>\n<li><p>post-clean    执行clean后需要立刻完成的工作  </p>\n</li>\n</ul>\n<blockquote>\n<p>这里的clean就是指的mvn clean。在一套生命周期内，运行某个阶段会自动按序运行之前阶段，mvn clean=mvn pre-clean clean</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Default-Lifecycle\"><a href=\"#Default-Lifecycle\" class=\"headerlink\" title=\"Default Lifecycle\"></a>Default Lifecycle</h3><p>构建的核心部分，编译，测试，打包，部署等等。</p>\n<ul>\n<li><p>validate      验证项目是否正确，并且所有必要的信息可用于完成构建过程</p>\n</li>\n<li><p>initialize    建立初始化状态，例如设置属性</p>\n</li>\n<li><p>generate-sources</p>\n</li>\n<li><p>process-sources </p>\n</li>\n<li><p>generate-resources</p>\n</li>\n<li><p>process-resources     复制并处理资源文件，至目标目录，准备打包。</p>\n</li>\n<li><p>compile     编译项目的源代码。</p>\n</li>\n<li><p>process-classes</p>\n</li>\n<li><p>generate-test-sources</p>\n</li>\n<li><p>process-test-sources </p>\n</li>\n<li><p>generate-test-resources</p>\n</li>\n<li><p>process-test-resources     复制并处理资源文件，至目标测试目录。</p>\n</li>\n<li><p>test-compile     编译测试源代码。</p>\n</li>\n<li><p>process-test-classes</p>\n</li>\n<li><p>test     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</p>\n</li>\n<li><p>prepare-package</p>\n</li>\n<li><p>package     提取编译后的代码，并在其分发格式打包，如JAR，WAR或EAR文件</p>\n</li>\n<li><p>pre-integration-test     完成执行集成测试之前所需操作。例如，设置所需的环境</p>\n</li>\n<li><p>integration-test</p>\n</li>\n<li><p>post-integration-test     完成集成测试已全部执行后所需操作。例如，清理环境</p>\n</li>\n<li><p>verify        运行任何检查，验证包是有效的，符合质量审核规定</p>\n</li>\n<li><p>install     将包安装至本地仓库，以让其它项目依赖。</p>\n</li>\n<li><p>deploy     将最终的包复制到远程的仓库，以让其它开发人员与项目共享    </p>\n</li>\n</ul>\n<h3 id=\"Site-Lifecycle\"><a href=\"#Site-Lifecycle\" class=\"headerlink\" title=\"Site Lifecycle\"></a>Site Lifecycle</h3><p>生成项目报告，站点，发布站点。</p>\n<ul>\n<li><p>pre-site     执行一些需要在生成站点文档(html)之前完成的工作</p>\n</li>\n<li><p>site     生成项目信息的站点文档</p>\n</li>\n<li><p>post-site     执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p>\n</li>\n<li><p>site-deploy     将生成的站点文档部署到特定的服务器上</p>\n</li>\n</ul>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://blog.sina.com.cn/s/blog_e01142dc0102wup3.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_e01142dc0102wup3.html</a></p>\n</blockquote>\n","categories":["工具学习","maven"],"tags":["maven生命周期","maven插件"]},{"title":"","url":"http://yangyuanming.com/post/0.html","content":"<hr>\n<p>title: maven常用构建命令及库的概念<br>comment: true<br>tags:</p>\n<ul>\n<li>maven构建命令</li>\n<li>maven库<br>categories:</li>\n<li>工具学习</li>\n<li>maven<br>abbrlink: fcecdefc<h2 id=\"date-2018-07-22-11-42-00\"><a href=\"#date-2018-07-22-11-42-00\" class=\"headerlink\" title=\"date: 2018-07-22 11:42:00\"></a>date: 2018-07-22 11:42:00</h2>[TOC]</li>\n</ul>\n<h2 id=\"maven常用构建命令\"><a href=\"#maven常用构建命令\" class=\"headerlink\" title=\"maven常用构建命令\"></a>maven常用构建命令</h2><ol>\n<li>查看maven版本：mvn -v</li>\n<li>编译：mvn compile</li>\n<li>打包：mvn package</li>\n<li>测试：mvn test</li>\n<li>删除target目录：mvn clean</li>\n<li>安装jar包到本地仓库：mvn install  <a id=\"more\"></a></li>\n<li>自动建立目录结构的两种方式：</li>\n</ol>\n<ul>\n<li><p>mvn archetype:generate 按指示输入信息</p>\n</li>\n<li><p>mvn archetype:generate<br>-DgroupId=网址+项目名<br>-DartifactId=项目名-模块名<br>-Dversion=版本号<br>-Dpackage=代码包名</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"构件、仓库、镜像仓库\"><a href=\"#构件、仓库、镜像仓库\" class=\"headerlink\" title=\"构件、仓库、镜像仓库\"></a>构件、仓库、镜像仓库</h2><h3 id=\"构件\"><a href=\"#构件\" class=\"headerlink\" title=\"构件\"></a>构件</h3><p>pom.xml配置文件中的dependency，包含构件坐标等信息。</p>\n<h3 id=\"仓库-repository\"><a href=\"#仓库-repository\" class=\"headerlink\" title=\"仓库(repository)\"></a>仓库(repository)</h3><p>分为本地仓库和远程仓库。先去本地仓库查询构件，如果没有就去远程仓库下载。</p>\n<blockquote>\n<p>maven提供了一个默认的全球中央仓库，解压lib/maven-model-builder-version.jar，可以发现pom-4.0.0.xml在org/apache/maven/model下,pom-4.0.0.xml中配置了该仓库，所有项目的pom.xml都会继承该xml,默认就使用了该全球中央仓库。</p>\n</blockquote>\n<p><strong>中央仓库配置如下：</strong></p>\n<pre><code class=\"xml\">&lt;repository&gt;\n      &lt;id&gt;central&lt;/id&gt;\n      &lt;name&gt;Central Repository&lt;/name&gt;\n      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;\n      &lt;layout&gt;default&lt;/layout&gt;\n      &lt;snapshots&gt;\n        &lt;enabled&gt;false&lt;/enabled&gt;\n      &lt;/snapshots&gt;\n&lt;/repository&gt;\n</code></pre>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><p>配置远程仓库的镜像，所有针对原仓库的访问将转到镜像仓库，原仓库的url设置无效。</p>\n<ul>\n<li><p>conf/settings.xml中配置镜像仓库，镜像可以有多个。</p>\n</li>\n<li><p>mirror的mirrorOf不能和任何一个mirror的id相同。  </p>\n</li>\n<li><p>mirrorOf配置的是该镜像所匹配的远程仓库(id)。拦截对应的远程仓库，使所有针对原仓库的访问将转到镜像仓库。</p>\n</li>\n<li><p>mirrorOf可以配置多个值，用逗号隔开</p>\n</li>\n</ul>\n<blockquote>\n<p>默认是没有配置mirror的，为了加速构件和插件的下载速度，我配置了一个阿里云的mirror，mirrorOf配置的是central，则id是central的仓库(中央仓库)将会转到阿里云的镜像下载构件，原仓库的url设置将失效。</p>\n</blockquote>\n<pre><code class=\"xml\">&lt;mirror&gt;\n        &lt;id&gt;nexus-aliyun&lt;/id&gt;\n        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n        &lt;name&gt;Nexus aliyun&lt;/name&gt;\n        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;\n&lt;/mirror&gt;\n</code></pre>\n<ul>\n<li><p>mirrorOf的值设置</p>\n<ul>\n<li><p><strong>rep1</strong>:代表这个镜像仅仅针对rep1这个库。如果存在多个镜像的mirrorOf值都包含rep1，则按顺序匹配。</p>\n</li>\n<li><p><strong>*</strong>:代表匹配所有的库。注意maven会优先匹配mirrorOf值与仓库id完全相同的镜像。例如id为rep1的仓库会优先匹配mirrorOf也为rep1的镜像，如果没有才会匹配mirrorOf为*的镜像。</p>\n</li>\n<li><p><strong>*,!rep1</strong>:匹配所有的库，除了rep1 </p>\n</li>\n<li><p><strong>external:*</strong>:代表匹配任意不在localhost上的仓库，或不是基于文件的仓库。这个主要是看repository中的url判断的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更改本地仓库位置\"><a href=\"#更改本地仓库位置\" class=\"headerlink\" title=\"更改本地仓库位置\"></a>更改本地仓库位置</h3><blockquote>\n<p>maven下载的构件默认放在~/.m2/repository下面，其中~代表用户目录。可以在conf/settings.xml中自定义本地仓库的位置。</p>\n</blockquote>\n<ul>\n<li>从文档注释中复制localRepository标签，粘贴，填入自定义目录</li>\n</ul>\n<pre><code class=\"xml\">&lt;localRepository&gt;/Users/yuanming/maven_repo&lt;/localRepository&gt;\n</code></pre>\n<ul>\n<li>备份settings.xml到maven_repo文件夹(自定义仓库文件夹)，在IDE中设置settings file的路径为备份的settings.xml的路径。以后更新maven，不用重新配置settings.xml。</li>\n</ul>\n","categories":[],"tags":[]},{"title":"","url":"http://yangyuanming.com/404.html","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://yangyuanming.com\" homepagename=\"回到我的主页\">\n</script>","categories":[],"tags":[]},{"title":"","url":"http://yangyuanming.com/404/index.html","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://icircles.top\" homepagename=\"回到我的主页\">\n</script>","categories":[],"tags":[]},{"title":"关于","url":"http://yangyuanming.com/about/index.html","content":"<blockquote>\n<p>IMIS,GDUT<br>后台开发，Java Web<br>熟悉ssm框架</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"分类","url":"http://yangyuanming.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yangyuanming.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"图库","url":"http://yangyuanming.com/gallery/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yangyuanming.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"Links","url":"http://yangyuanming.com/links/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yangyuanming.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yangyuanming.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yangyuanming.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"http://yangyuanming.com/tags/index.html","content":"","categories":[],"tags":[]},{"title":"归档","url":"http://yangyuanming.com/timeline/index.html","content":"","categories":[],"tags":[]}]
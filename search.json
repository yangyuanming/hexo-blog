[{"title":"maven学习篇三:依赖","url":"https://yangyuanming.com/post/2b7d8cb0.html","content":"<p>maven3中classpath:编译、运行、测试<br>依赖范围的作用：控制依赖和3种classpath的关系<br><a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\" target=\"_blank\" rel=\"noopener\">maven官方文档</a>中对dependency scope的介绍<br>Dependency Scope的值</p>\n<ul>\n<li>compile 默认的scope，</li>\n</ul>\n","categories":["工具学习","maven"],"tags":["maven","maven依赖"]},{"title":"maven学习篇二:生命周期和插件","url":"https://yangyuanming.com/post/b37b3bbf.html","content":"<h2 id=\"maven生命周期\"><a href=\"#maven生命周期\" class=\"headerlink\" title=\"maven生命周期\"></a>maven生命周期</h2><p>maven抽象出了3套生命周期，其具体实现是依赖于<a href=\"https://maven.apache.org/plugins/index.html\" target=\"_blank\" rel=\"noopener\">插件</a>。每套生命周期是相互独立的，都由一组阶段(Phase)组成。每套生命周期中的阶段是有顺序的，后面阶段依赖于前面的阶段，执行后面阶段会自动执行之前的阶段，但不会触发不同生命周期的阶段。</p>\n<p><strong>下面是三个生命周期及其包含的阶段。</strong></p>\n<h3 id=\"Clean-Lifecycle\"><a href=\"#Clean-Lifecycle\" class=\"headerlink\" title=\"Clean Lifecycle\"></a>Clean Lifecycle</h3><p>清理项目，在进行真正的构建之前进行一些清理工作。</p>\n<ul>\n<li><p><code>pre-clean</code>     执行clean前需要完成的工作  </p>\n</li>\n<li><p><code>clean</code>     clean上一次构建生成的所有文件  </p>\n</li>\n<li><p><code>post-clean</code>    执行clean后需要立刻完成的工作  </p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<p>这里的clean就是指的<code>mvn clean</code>。在一套生命周期内，运行某个阶段会自动按序运行之前阶段，<code>mvn clean=mvn pre-clean clean</code>。</p>\n<h3 id=\"Default-Lifecycle\"><a href=\"#Default-Lifecycle\" class=\"headerlink\" title=\"Default Lifecycle\"></a>Default Lifecycle</h3><p><strong>构建的核心部分</strong>，编译，测试，打包，部署等等。</p>\n<ul>\n<li><p><code>validate</code>      验证项目是否正确，并且所有必要的信息可用于完成构建过程</p>\n</li>\n<li><p><code>initialize</code>    建立初始化状态，例如设置属性</p>\n</li>\n<li><p><code>generate-sources</code></p>\n</li>\n<li><p><code>process-sources</code> </p>\n</li>\n<li><p><code>generate-resources</code></p>\n</li>\n<li><p><code>process-resources</code>     复制并处理资源文件，至目标目录，准备打包。</p>\n</li>\n<li><p><code>compile</code>     编译项目的源代码。</p>\n</li>\n<li><p><code>process-classes</code></p>\n</li>\n<li><p><code>generate-test-sources</code></p>\n</li>\n<li><p><code>process-test-sources</code> </p>\n</li>\n<li><p><code>generate-test-resources</code></p>\n</li>\n<li><p><code>process-test-resources</code>     复制并处理资源文件，至目标测试目录。</p>\n</li>\n<li><p><code>test-compile</code>     编译测试源代码。</p>\n</li>\n<li><p><code>process-test-classes</code></p>\n</li>\n<li><p><code>test</code>     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</p>\n</li>\n<li><p><code>prepare-package</code></p>\n</li>\n<li><p><code>package</code>     提取编译后的代码，并在其分发格式打包，如JAR，WAR或EAR文件</p>\n</li>\n<li><p><code>pre-integration-test</code>     完成执行集成测试之前所需操作。例如，设置所需的环境</p>\n</li>\n<li><p><code>integration-test</code></p>\n</li>\n<li><p><code>post-integration-test</code>     完成集成测试已全部执行后所需操作。例如，清理环境</p>\n</li>\n<li><p><code>verify</code>        运行任何检查，验证包是有效的，符合质量审核规定</p>\n</li>\n<li><p><code>install</code>     将包安装至本地仓库，以让其它项目依赖。</p>\n</li>\n<li><p><code>deploy</code>     将最终的包复制到远程的仓库，以让其它开发人员与项目共享    </p>\n</li>\n</ul>\n<h3 id=\"Site-Lifecycle\"><a href=\"#Site-Lifecycle\" class=\"headerlink\" title=\"Site Lifecycle\"></a>Site Lifecycle</h3><p>生成项目报告，站点，发布站点。</p>\n<ul>\n<li><p><code>pre-site</code>     执行一些需要在生成站点文档(html)之前完成的工作</p>\n</li>\n<li><p><code>site</code>     生成项目信息的站点文档</p>\n</li>\n<li><p><code>post-site</code>    执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p>\n</li>\n<li><p><code>site-deploy</code>     将生成的站点文档部署到特定的服务器上</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"maven插件目标\"><a href=\"#maven插件目标\" class=\"headerlink\" title=\"maven插件目标\"></a>maven插件目标</h2><p>maven本质是一个插件框架，maven每个生命周期的每个阶段(phase)默认绑定了一个或多个插件中的一个或多个目标。用户可以自行配置或编写插件。<br><strong>一个插件对应一个或多个目标，一个插件可以绑定多个生命周期阶段。</strong></p>\n<hr>\n<h2 id=\"两种方式调用插件目标\"><a href=\"#两种方式调用插件目标\" class=\"headerlink\" title=\"两种方式调用插件目标\"></a>两种方式调用插件目标</h2><h3 id=\"插件目标绑定maven生命周期阶段\"><a href=\"#插件目标绑定maven生命周期阶段\" class=\"headerlink\" title=\"插件目标绑定maven生命周期阶段\"></a>插件目标绑定maven生命周期阶段</h3><p>   这分为内置绑定和自定义绑定。</p>\n<ul>\n<li>内置绑定。maven的生命周期的阶段已经默认和一些插件的目标进行了绑定。例如Maven默认将<code>maven-compiler-plugin</code>的<code>compile</code>目标与compile生命周期阶段绑定，因此命令mvn compile实际上是先定位到compile这一生命周期阶段，然后再根据绑定关系调用maven-compiler-plugin的<code>compile</code>目标。  </li>\n<li>自定义绑定。在pom.xml中进行配置，我们可以根据需要将任何插件目标绑定到任何生命周期的任何阶段。如：将maven-source-plugin的<code>jar-no-fork</code>目标绑定到default生命周期的package阶段，这样，以后在执行<code>mvn package</code>命令打包项目时，在package<strong>阶段之后</strong>会执行源代码打包。<br><strong>自定义绑定的插件目标是在绑定的生命周期阶段之后执行的</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span> <span class=\"comment\">&lt;!--执行--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>attach-source<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 要绑定到的生命周期的阶段 --&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"comment\">&lt;!-- 要绑定的插件的目标，在maven官网plugins上可以查到 --&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar-no-fork<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行命令时直接指定插件目标-与生命周期无关\"><a href=\"#运行命令时直接指定插件目标-与生命周期无关\" class=\"headerlink\" title=\"运行命令时直接指定插件目标(与生命周期无关)\"></a>运行命令时直接指定插件目标(与生命周期无关)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn 插件目标前缀(prefix):插件目标 </span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">各插件目标的命令在官网可以查。例如`mvn archetype:generate` 就表示调用maven-archetype-plugin的`generate`目标，这种**带冒号的调用方式与生命周期无关**。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 插件配置</span><br><span class=\"line\"></span><br><span class=\"line\">完成插件和生命周期的绑定后，用户还可以配置插件目标的参数，进一步调整插件目标所执行的任务，以满足项目的需求。几乎所有的Maven插件的目标都有一些可配置的参数，用户可以通过命令行和POM配置的方式来配置这些参数。</span><br><span class=\"line\">### 命令行插件配置</span><br><span class=\"line\">用户可以在Maven命令中使用-D参数，并伴随一个参数键=参数值得形式，来配置插件目标的参数。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，maven-surefire-plugin提供了一个maven.test.skip参数，当其值为true的时候，就会跳过执行测试，于是在运行命令的时候，加上如下-D参数就能跳过测试。</span><br></pre></td></tr></table></figure>\n<p>mvn install -Dmaven.test.skip=true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">参数-D是Java自带的，其功能是通过命令行设置一个Java系统属性，Maven简单的重用了该参数，在准备插件的时候检查系统属性，便实现了插件参数的配置。</span><br><span class=\"line\">### 在POM中插件全局配置</span><br><span class=\"line\">并不是所有的插件参数都适合从命令行配置，有些参数的值从项目创建到项目发布都不会改变，或者说很少改变，对于这种情况，在POM文件中一次性配置就显然比重负在命令行输入要方便。</span><br><span class=\"line\"></span><br><span class=\"line\">用户可以在声明插件的时候，对此插件进行一个全局配置。也就是说，所有该基于该插件目标的任务，都会使用这些配置。例如我们通常会需要配置maven-compiler-plugin告诉它配置Java1.5版本的源文件，生成与JVM1.5兼容的字节码文件，代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\">```xml</span><br><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artfactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.1&lt;/version&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;source&gt;1.5&lt;/source&gt;</span><br><span class=\"line\">                &lt;target&gt;1.5&lt;/target&gt;</span><br><span class=\"line\">            &lt;/configration&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样，不管绑定到compile阶段的<code>maven-compiler-plugin:compile</code>任务，还是绑定到test-compiler阶段的<code>maven-compiler-plugin:testCompiler</code>任务，这都能够使用该配置，基于Java1.5版本进行编译。</p>\n<h3 id=\"POM中插件任务配置\"><a href=\"#POM中插件任务配置\" class=\"headerlink\" title=\"POM中插件任务配置\"></a>POM中插件任务配置</h3><p>除了为插件配置全局的参数，用户还可以为某个插件任务配置特定的参数。以maven-antrun-plugin为例，它有一个目标<code>run</code>,可以用来在Maven中调用Ant任务。用户将<code>maven-antrun-plugin:run</code>绑定到多个生命周期阶段上，再加以不同的配置，就可以让Maven在不同的生命周期执行不同的任务，代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>ant-validate<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>validate<span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">echo</span>&gt;</span>Im'bound to validate phase<span class=\"tag\">&lt;/<span class=\"name\">echo</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configurationo</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>ant-verify<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>verify<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">echo</span>&gt;</span>I'm bound to verify phase<span class=\"tag\">&lt;/<span class=\"name\">echo</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上述代码片段中，首先，<code>maven-antrun-plugin:run</code>与validate绑定，从而构成一个id为ant-validate的任务。插件全局配置中的configuration元素位于plugin元素下面，而这里的configuration元素则位于execution元素下，表示这是特定任务的配置，而非插件整体的配置。这个ant-validate任务配置了一个echo Ant任务，向命令行输出一段文字，表示该任务是绑定到validate阶段的。第二个任务的id为ant-verify，它绑定到了verify阶段，同样它也输出一段文字到命令行，告诉该任务绑定到了verify阶段。</p>\n<hr>\n<h2 id=\"获取插件信息\"><a href=\"#获取插件信息\" class=\"headerlink\" title=\"获取插件信息\"></a>获取插件信息</h2><p>仅仅理解如何配置和使用插件是不够的，当遇到一个构建任务的时候，用户还需要知道去哪里寻找合适的插件，以帮助完成任务，找到正确的插件之后，还要详细了解该插件的配置点。由于Maven的插件非常多，这其中大部分没有完善文档，因此，使用正确的插件并进行正确的配置，其实并不是一件容易的事。</p>\n<h3 id=\"在线插件信息\"><a href=\"#在线插件信息\" class=\"headerlink\" title=\"在线插件信息\"></a>在线插件信息</h3><p>基本所有的主要的Maven插件都来自Apache和Codehaus。由于Maven本身是属于Apache软件基金会的，因此他有很多的官方的插件，每天都有成千上万的Maven用户在使用这些插件，他们具有非常好的的稳定性。<br><a href=\"https://maven.apache.org/plugins/index.html\" target=\"_blank\" rel=\"noopener\">官网插件介绍</a><br><a href=\"http://repo1.maven.org/maven2/org/apache/maven/plugins\" target=\"_blank\" rel=\"noopener\">插件列表</a>  </p>\n<h3 id=\"使用maven-help-plugin描述插件\"><a href=\"#使用maven-help-plugin描述插件\" class=\"headerlink\" title=\"使用maven-help-plugin描述插件\"></a>使用maven-help-plugin描述插件</h3><p>除了访问在线的插件文档之外，还可以借助maven-help-plugin来获取插件的详细信息。。可以运行一下命令来获取maven-compiler-plugin2.1版本的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn help:describe-Dplugin=org.apache.maven.plugins:maven-compiler-plugin:2.1</span><br></pre></td></tr></table></figure>\n<p>这里执行的是maven-help-plugins的<code>describe</code>目标，在参数的plugin中输入需要描述插件的groupId、artfactId和version。Maven在命令行输出maven-compiler-plugin的简要信息。</p>\n<p>在描述插件的时候，还可以省去版本信息，让Maven自动获取最新版本来进行表述。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn help:describe-Dplugin=org.apache.maven.plugins:maven-compiler-plugin</span><br></pre></td></tr></table></figure>\n<p>进一步简化，可以使用插件目标前缀替换坐标。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn help:describe-Dplugin=compiler</span><br></pre></td></tr></table></figure>\n<p>如果仅仅想描述某个插件目标的信息，可以加上goal参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn help:describe-Dplugin=compiler-Dgoal=compile</span><br></pre></td></tr></table></figure>\n<p>如果想让maven-help-plugin输出更详细的信息，可以加上detail参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn help:describe -Dplugin=compiler-Ddetail</span><br></pre></td></tr></table></figure>\n<h3 id=\"从命令行调用插件\"><a href=\"#从命令行调用插件\" class=\"headerlink\" title=\"从命令行调用插件\"></a>从命令行调用插件</h3><p>如果在命令行运行mvn -h来显示mvn命令帮助，可以看到如下的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">usage: mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">Options:</span><br><span class=\"line\"> -am,--also-make                        If project list is specified, also</span><br><span class=\"line\">                                        build projects required by the</span><br><span class=\"line\">                                        list</span><br><span class=\"line\"> -amd,--also-make-dependents            If project list is specified, also</span><br><span class=\"line\">                                        build projects that depend on</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>该信息告诉了我们mvn命令的基本用法，options表示可用的选项，mvn命令有20多个选项，除了选项之外，mvn命令后面可以添加一个或者多个goal和phase，他们分别是指插件目标和生命周期阶段</p>\n<p>可以通过mvn命令激活生命周期阶段，从而执行那些绑定在生命周期阶段上的插件目标。但Maven还支持直接从命令行调用插件目标。Maven支持这种方式是因为有些任务不适合绑定在生命周期上，例如maven-help-plugin:describe，我们不需要在构建项目的时候去描述插件信息，又如maven-dependency-plugin:tree,我们也不需要在构建项目的时候去显示依赖树，因此这些插件目标应该通过如下方式使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn help:describe-Dplugin=compiler</span><br><span class=\"line\">mvn dependency:tree</span><br></pre></td></tr></table></figure>\n<p>不过这里有个疑问，describe是maven-help-plugin的目标没错，但是冒号前面的help是什么呢？它既不是groupId，也不是artifactId,Maven是如何根据该信息找到对应版本插件的呢？同理为什么不是<code>maven-dependency-plugin:tree</code>,而是<code>dependency:tree</code></p>\n<p>解答该疑问之前，可以尝试一下如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn org.apache.maven.plugins:maven-help-plugin:2.1:describe-Dplugin=compiler</span><br><span class=\"line\"></span><br><span class=\"line\">mvn org.apache.maven.plugins:maven-dependency-plugin:2.1:tree</span><br></pre></td></tr></table></figure>\n<p>这两条命令就比较容易理解了，插件的groupId、artifactId、version以及goal都得以清晰描述。它们的效果与之前的两条命令基本是一样的，但是显然前面的命令更简洁，更容易记忆和使用。为了达到该目的，Maven引入了目标前缀的概念help是maven-help-plugin的目标前缀，dependency是maven-dependency-plugin的前缀，有了插件前缀，Maven就能找到对应的artifactId。不过，除了artifactId,Maven还需要得到groupId和version才能精确定位到某个插件。</p>\n<hr>\n<h2 id=\"插件解析机制\"><a href=\"#插件解析机制\" class=\"headerlink\" title=\"插件解析机制\"></a>插件解析机制</h2><h3 id=\"仓库元数据\"><a href=\"#仓库元数据\" class=\"headerlink\" title=\"仓库元数据\"></a>仓库元数据</h3><h4 id=\"插件元数据\"><a href=\"#插件元数据\" class=\"headerlink\" title=\"插件元数据\"></a>插件元数据</h4><p><strong>主要用于解释插件版本</strong></p>\n<blockquote>\n<p>在远程仓库存放的位置结构:<br><a href=\"http://repo1.maven.org/maven2/groupId/artifactId/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">http://repo1.maven.org/maven2/groupId/artifactId/maven-metadata.xml</a>  </p>\n</blockquote>\n<p>这里的groupId指的就是构件的groupId，artifactId指的是构件的artifactId，例如插件maven-compiler-plugin的元数据链接:<br><a href=\"http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/maven-metadata.xml</a><br>内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">metadata</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">versioning</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">latest</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">latest</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">release</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">release</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">versions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0-beta-1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">versions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">lastUpdated</span>&gt;</span>20170904193138<span class=\"tag\">&lt;/<span class=\"name\">lastUpdated</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">versioning</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">metadata</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"插件前缀元数据\"><a href=\"#插件前缀元数据\" class=\"headerlink\" title=\"插件前缀元数据\"></a>插件前缀元数据</h4><p><strong>主要用于解释插件前缀</strong></p>\n<blockquote>\n<p>在远程仓库存放的位置结构:<br><a href=\"http://repo1.maven.org/maven2/groupId/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">http://repo1.maven.org/maven2/groupId/maven-metadata.xml</a></p>\n</blockquote>\n<p>我们使用一般使用官方的插件就够了，官方插件默认的groupId为org.apache.maven.plugins，对应的链接为<br><a href=\"http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-metadata.xml</a><br>下面是前缀元数据xml文件截取的部分内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">metadata</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Apache Maven ACR Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">prefix</span>&gt;</span>acr<span class=\"tag\">&lt;/<span class=\"name\">prefix</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-acr-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Apache Maven Ant Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">prefix</span>&gt;</span>ant<span class=\"tag\">&lt;/<span class=\"name\">prefix</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-ant-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven ANTLR Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">prefix</span>&gt;</span>antlr<span class=\"tag\">&lt;/<span class=\"name\">prefix</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antlr-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">metadata</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插件仓库\"><a href=\"#插件仓库\" class=\"headerlink\" title=\"插件仓库\"></a>插件仓库</h3><p>与依赖仓库一样，插件构件同样基于坐标存储在Maven仓库中，在需要的时候Maven会从本地仓库查找插件，如果不存在，则从远程仓库查找。找到插件之后，再下载到本地仓库使用。</p>\n<p>需要注意的是，Maven会区别对待依赖的远程仓库与插件的远程仓库。前面提到如何配置远程仓库，但是这种配置只对一般依赖有效果，当Maven需要的依赖在本地仓库不存在时，它会去所配置的远程仓库中查找，可是当Maven需要的插件在本地仓库存在时，他就不会去那些远程仓库查找。</p>\n<p>不同于repositories及其repository子元素，插件的远程仓库使用pluginRepositories和pluginReposirory配置，例如，Maven的超级pom:pom-4.0.0.xml配置了如下的插件远程仓库,代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven Plugin Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo1.maven.org/maven2<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">updatePolicy</span>&gt;</span>never<span class=\"tag\">&lt;/<span class=\"name\">updatePolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一般来说，中央仓库所包含的插件完全能够满足我们的需要，因此也不需要配置其他的插件仓库。只有在很少的情况下，项目使用的插件无法在中央仓库找到，或者自己编写的插件，这个时候可以参考上述的配置，在POM或者settings.xml中加入其他的插件仓库配置。</p>\n<h3 id=\"插件的默认groupId\"><a href=\"#插件的默认groupId\" class=\"headerlink\" title=\"插件的默认groupId\"></a>插件的默认groupId</h3><p>在POM配置中配置插件的时候，如果该插件是Maven的官方插件（即如果其groupId为org.apache.maven.plugins），就可以省略groupId配置，见代码清单：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面省略了配置maven-compiler-plugin的groupId，Maven在解析该插件的时候，会自动用默认groupId org.apache.maven.plugins补齐。但是并不推荐使用Maven的这一机制，这样虽然可以省略一些配置，但是这样的配置会让团队中不熟悉Maven的成员感到费解，况且能省略的配置也就仅仅一行而已。</p>\n<h3 id=\"解析插件版本\"><a href=\"#解析插件版本\" class=\"headerlink\" title=\"解析插件版本\"></a>解析插件版本</h3><blockquote>\n<p>同样是为了简化插件的配置和使用，在用户没有提供插件版本的情况下，Maven会自动解析插件版本。<br>首先，Maven的超级POM中为所有核心插件设定了版本,超级POM是所有Maven项目的父POM，所有项目都会继承这个超级POM配置，因此，即使用户不加任何配置，Maven使用核心插件的时候，他们的版本都已经确定了，这些插件包括maven-clean-plugin、maven-compiler-plugin、maven-surefire-plugin等。</p>\n</blockquote>\n<p>上面说法是来自其他博客，我表示质疑，我使用的是maven3.5.4，在超级pom中并没有发现其为所有核心插件设定了版本。对于超级pom中没有设定版本的核心插件，没有指定版本时应该使用release版本。</p>\n<p>如果用户使用某个插件时没有设定版本，而这个插件又不属于核心插件范畴，Maven就会去检查所有仓库中的可用版本，然后做出选择。以maven-compiler-plugin为例，他在中央仓库的<a href=\"http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/maven-metadata.xml\" target=\"_blank\" rel=\"noopener\">仓库元数据</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">metadata</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">versioning</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">latest</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">latest</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">release</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">release</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">versions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0-beta-1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">versions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">lastUpdated</span>&gt;</span>20170904193138<span class=\"tag\">&lt;/<span class=\"name\">lastUpdated</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">versioning</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">metadata</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Maven遍历本地仓库和所有远程插件仓库，将该路径下的仓库元数据归并后，就能计算出latest和release的值。latest表示所有仓库中该构件的最新版本，而release表示最新的非快照版本。在Maven2中，插件的版本会被解析至latest。也就是说，当用户使用某个非核心插件且没有声明版本的时候，Maven会将版本解析为所有可用仓库中的最新版本，而这个版本也可能是快照版本的。</p>\n<p>当插件的版本为快照版本的时，就会出现潜在的问题。Maven会基于更新策略，检查并使用快照的更新。某个插件可能昨天还好好的，今天就出错了。其原因是因为这个版本的插件发生了变化，为了防止这类问题，Maven3调整了解析机制，当插件没有声明版本的时候，不再解析至latest，而是使用release。这样就可以避免由于快照频繁更新而导致的插件行为不稳定。</p>\n<p>依赖Maven解析插件版本其实是不推荐的做法，即使Maven3将版本解析到最新的非快照版本，也还是唯有潜在的不稳定性。例如，可能某个构件发布了一个新的版本，而这个版本的行为与之前的的版本发生了变化，这种变化就可能导致项目构建失败。因此，使用插件的时候，应该一直显式的设定版本，这也解释了Maven为什么要在超级POM中为核心插件设定版本。</p>\n<h3 id=\"解析插件前缀\"><a href=\"#解析插件前缀\" class=\"headerlink\" title=\"解析插件前缀\"></a>解析插件前缀</h3><p>mvn命令行支持使用插件前缀来简化插件的调用，现在解释Maven如何根据插件前缀解析到插件的坐标的。</p>\n<p>插件前缀与<code>groupId:artifactId</code>是一一对应的，这种匹配关系存储在仓库元数据中。这里的仓库元数据不是groupId/artifactId/maven-metadata.xml，而是groupId/maven-metadata.xml。当Maven解析前缀:</p>\n<ul>\n<li>首先会基于默认的groupId(org.apache.maven.plugins)归并所有插件仓库的元数据org/apache/maven/plugins/maven-metadata.xml</li>\n<li>其次检查归并后的元素，根据前缀(prefix)找到对应的artifactId；</li>\n<li>结合artifactId和groupId，最后获取version，这是就得到了完整的插件坐标。</li>\n<li>若org/apache/maven/plugins/maven-metadata.xml没有记录该插件前缀，则接着检查其他groupId下的元数据，如org/codehaus/mojo/maven-metadata.xml以及用户自定义的插件。若所有元数据都不包含该前缀，则报错。</li>\n</ul>\n<blockquote>\n<p>插件前缀元数据部分内容:</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">metadata</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Apache Maven ACR Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">prefix</span>&gt;</span>acr<span class=\"tag\">&lt;/<span class=\"name\">prefix</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-acr-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Apache Maven Ant Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">prefix</span>&gt;</span>ant<span class=\"tag\">&lt;/<span class=\"name\">prefix</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-ant-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven ANTLR Plugin<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">prefix</span>&gt;</span>antlr<span class=\"tag\">&lt;/<span class=\"name\">prefix</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antlr-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">metadata</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://blog.sina.com.cn/s/blog_e01142dc0102wup3.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_e01142dc0102wup3.html</a><br><a href=\"https://www.cnblogs.com/wangwei-beijing/p/6535081.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wangwei-beijing/p/6535081.html</a></p>\n</blockquote>\n","categories":["工具学习","maven"],"tags":["maven","maven生命周期","maven插件目标","maven插件配置","maven插件解析"]},{"title":"maven学习篇一:构建命令、构件和库","url":"https://yangyuanming.com/post/5ebf0f9d.html","content":"<h2 id=\"maven常用构建命令\"><a href=\"#maven常用构建命令\" class=\"headerlink\" title=\"maven常用构建命令\"></a>maven常用构建命令</h2><ol>\n<li>查看maven版本：<code>mvn -v</code></li>\n<li>编译：<code>mvn compile</code></li>\n<li>打包：<code>mvn package</code></li>\n<li>测试：<code>mvn test</code></li>\n<li>删除target目录：<code>mvn clean</code></li>\n<li>安装jar包到本地仓库：<code>mvn install</code> <a id=\"more\"></a> </li>\n<li>自动建立目录结构的两种方式：</li>\n</ol>\n<ul>\n<li><p><code>mvn archetype:generate</code> 按指示输入信息</p>\n</li>\n<li><p><code>mvn archetype:generate</code> </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-DgroupId=网址+项目名  </span><br><span class=\"line\">-DartifactId=项目名-模块名  </span><br><span class=\"line\">-Dversion=版本号  </span><br><span class=\"line\">-Dpackage=代码包名</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"构件、仓库、镜像仓库\"><a href=\"#构件、仓库、镜像仓库\" class=\"headerlink\" title=\"构件、仓库、镜像仓库\"></a>构件、仓库、镜像仓库</h2><h3 id=\"构件\"><a href=\"#构件\" class=\"headerlink\" title=\"构件\"></a>构件</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li><p>在Maven中，任何依赖(jar包,tomcat等)、插件，或构建的输出都可成为构件。</p>\n</li>\n<li><p>Maven在某个统一的位置存储所有项目的共享的构件，这个统一的位置，我们就称之为仓库。（仓库就是存放依赖和插件的地方）</p>\n</li>\n<li><p>任何的构件都有唯一的坐标，Maven根据这个坐标定义了构件在仓库中的唯一存储路径。</p>\n</li>\n<li>坐标的组成：<ul>\n<li><code>groupId</code> 当前Maven构件隶属的项目名。实际开发中，项目往往会模块化开发，如spring-core,spring-aop等，他们都是Spring项目下不同的模块。命名方式与Java包名类似，通常是域名的反向书写。如ch.qos.logback，事实上项目管理组织的网址是：<a href=\"http://logback.qos.ch/\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch/</a> 。(必须)</li>\n<li><code>artifactId</code>：隶属项目中的模块名。(必须)</li>\n<li><code>version</code>：当前版本。(必须)</li>\n<li><code>packaging</code>：打包方式，如jar,war… (必须)</li>\n<li><code>classifier</code>：帮助定义构建输出的一些附属构件。如spring-core.jar，还生成有文档javadoc.jar，源码sources.jar。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Maven构件在仓库中的存储路径\"><a href=\"#Maven构件在仓库中的存储路径\" class=\"headerlink\" title=\"Maven构件在仓库中的存储路径\"></a>Maven构件在仓库中的存储路径</h4><ul>\n<li><p>基于groupId准备路径，将句点分隔符转成路径分隔符，就是将  “.”  转换成 “/“ ; example： org.testng —&gt;org/testng</p>\n</li>\n<li><p>基于artifactId准备路径，将artifactId连接到后面：org/testng/testng</p>\n</li>\n<li><p>使用version准备路径，将version连接到后面：org/testng/testng/5.8</p>\n</li>\n<li><p>将artifactId于version以分隔符连字号连接到后面：org/testng/testng/5.8/tesng-5.8</p>\n</li>\n<li><p>判断如果构件有classifier，就要在 第4项 后增加 分隔符连字号 再加上 classifier，org/testng/testng/5.8/tesng-5.8-jdk5</p>\n</li>\n<li><p>检查构件的extension，如果extension存在，则加上句点分隔符和extension，而extension是由packing决定的，org/testng/testng/5.8/tesng-5.8-jdk5.jar </p>\n</li>\n</ul>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>构件具有依赖传递。例如：项目依赖构件A，而构件A又依赖B，Maven会将A和B都视为项目的依赖。</li>\n<li>构件之间存在版本冲突时，Maven会依据 “短路优先” 原则加载构件。此外，我们也可以在POM.XML中，使用<exclusions></exclusions>显式排除某个版本的依赖，以确保项目能够运行。<ul>\n<li>项目依赖构件A和B，构件A → C → D(version:1.0.0)，构件B → D(version:1.1.0)，此时，Maven会优先解析加载D(version:1.1.0)。</li>\n<li>项目依赖构件A和B，构件A → D(version:1.0.0)， 构件B → D(version:1.1.0)，此时，Maven会优先解析加载D(version:1.0.0)。</li>\n</ul>\n</li>\n<li>构件的依赖范围。Maven在项目的构建过程中，会编译三套classpath，分别对应：编译期，运行期，测试期。而依赖范围，就是为构件指定它可以作用于哪套classpath。</li>\n</ul>\n<h3 id=\"仓库-repository\"><a href=\"#仓库-repository\" class=\"headerlink\" title=\"仓库(repository)\"></a>仓库(repository)</h3><p>分为本地仓库和远程仓库。先去本地仓库查询构件，如果没有就去远程仓库下载。</p>\n<blockquote>\n<p>maven提供了一个默认的全球中央仓库，解压lib/maven-model-builder-version.jar，可以发现pom-4.0.0.xml在org/apache/maven/model下,pom-4.0.0.xml中配置了该仓库，所有项目的pom.xml都会继承该xml,默认就使用了该全球中央仓库。用户可以在pom.xml中自定义远程仓库。</p>\n</blockquote>\n<p><strong>中央仓库配置如下：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h3><p>配置远程仓库的镜像，所有针对原仓库的访问将转到镜像仓库，原仓库的url设置无效。</p>\n<ul>\n<li><p>conf/settings.xml中配置镜像仓库，镜像可以有多个。</p>\n</li>\n<li><p>mirror的mirrorOf不能和任何一个mirror的id相同。  </p>\n</li>\n<li><p>mirrorOf配置的是该镜像所匹配的远程仓库(id)。拦截对应的远程仓库，使所有针对原仓库的访问将转到镜像仓库。</p>\n</li>\n<li><p>mirrorOf可以配置多个值，用逗号隔开</p>\n</li>\n</ul>\n<blockquote>\n<p>默认是没有配置mirror的，为了加速构件和插件的下载速度，我配置了一个阿里云的mirror，mirrorOf配置的是central，则id是central的仓库(中央仓库)将会转到阿里云的镜像下载构件，原仓库的url设置将失效。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>mirrorOf的值设置</p>\n<ul>\n<li><p><strong>rep1</strong>:代表这个镜像仅仅针对rep1这个库。如果存在多个镜像的mirrorOf值都包含rep1，则按顺序匹配。</p>\n</li>\n<li><p><strong>*</strong>:代表匹配所有的库。注意maven会优先匹配mirrorOf值与仓库id完全相同的镜像。例如id为rep1的仓库会优先匹配mirrorOf也为rep1的镜像，如果没有才会匹配mirrorOf为*的镜像。</p>\n</li>\n<li><p><strong>*,!rep1</strong>:匹配所有的库，除了rep1 </p>\n</li>\n<li><p><strong>external:*</strong>:代表匹配任意不在localhost上的仓库，或不是基于文件的仓库。这个主要是看repository中的url判断的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更改本地仓库位置\"><a href=\"#更改本地仓库位置\" class=\"headerlink\" title=\"更改本地仓库位置\"></a>更改本地仓库位置</h3><blockquote>\n<p>maven下载的构件默认放在~/.m2/repository下面，其中~代表用户目录。可以在conf/settings.xml中自定义本地仓库的位置。</p>\n</blockquote>\n<ul>\n<li>从文档注释中复制localRepository标签，粘贴，填入自定义目录</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>/Users/yuanming/maven_repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>备份settings.xml到maven_repo文件夹(自定义仓库文件夹)，在IDE中设置settings file的路径为备份的settings.xml的路径。以后更新maven，不用重新配置settings.xml。</li>\n</ul>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/Maple-leaves/p/5785885.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Maple-leaves/p/5785885.html</a><br><a href=\"https://blog.csdn.net/chengfangjunmy/article/details/61192021\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/chengfangjunmy/article/details/61192021</a></p>\n</blockquote>\n","categories":["工具学习","maven"],"tags":["maven","maven构建命令","maven构件","maven库"]},{"title":"","url":"https://yangyuanming.com/404.html","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://yangyuanming.com\" homepagename=\"回到我的主页\">\n</script>","categories":[],"tags":[]},{"title":"","url":"https://yangyuanming.com/404/index.html","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://icircles.top\" homepagename=\"回到我的主页\">\n</script>","categories":[],"tags":[]},{"title":"关于","url":"https://yangyuanming.com/about/index.html","content":"<blockquote>\n<p>IMIS,GDUT<br>后台开发，Java Web<br>熟悉ssm框架</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"分类","url":"https://yangyuanming.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://yangyuanming.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"图库","url":"https://yangyuanming.com/gallery/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://yangyuanming.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"Links","url":"https://yangyuanming.com/links/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://yangyuanming.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://yangyuanming.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://yangyuanming.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"https://yangyuanming.com/tags/index.html","content":"","categories":[],"tags":[]},{"title":"归档","url":"https://yangyuanming.com/timeline/index.html","content":"","categories":[],"tags":[]}]
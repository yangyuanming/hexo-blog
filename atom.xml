<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨远明的时光小屋</title>
  
  <subtitle>时光偷走了记忆，我试着留下痕迹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangyuanming.com/"/>
  <updated>2018-07-24T02:28:14.722Z</updated>
  <id>http://yangyuanming.com/</id>
  
  <author>
    <name>杨远明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven生命周期和插件</title>
    <link href="http://yangyuanming.com/post/b37b3bbf.html"/>
    <id>http://yangyuanming.com/post/b37b3bbf.html</id>
    <published>2018-07-24T07:30:00.000Z</published>
    <updated>2018-07-24T02:28:14.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="maven生命周期"><a href="#maven生命周期" class="headerlink" title="maven生命周期"></a>maven生命周期</h2><p>maven抽象出了3套生命周期，其具体实现是依赖于<a href="http://maven.apache.org/plugins/index.html" target="_blank" rel="noopener">maven插件</a>。每套生命周期是相互独立的，都由一组阶段(Phase)组成。每套生命周期中的阶段是有顺序的，后面阶段依赖于前面的阶段，执行后面阶段会自动执行之前的阶段，但不会触发不同生命周期的阶段。</p><p><strong>下面是三个生命周期及其包含的阶段。</strong></p><h3 id="Clean-Lifecycle"><a href="#Clean-Lifecycle" class="headerlink" title="Clean Lifecycle"></a>Clean Lifecycle</h3><p>清理项目，在进行真正的构建之前进行一些清理工作。</p><ul><li><p>pre-clean     执行clean前需要完成的工作  </p></li><li><p>clean     clean上一次构建生成的所有文件  </p></li><li><p>post-clean    执行clean后需要立刻完成的工作  </p></li></ul><blockquote><p>这里的clean就是指的mvn clean。在一套生命周期内，运行某个阶段会自动按序运行之前阶段，mvn clean=mvn pre-clean clean</p></blockquote><h3 id="Default-Lifecycle"><a href="#Default-Lifecycle" class="headerlink" title="Default Lifecycle"></a>Default Lifecycle</h3><p>构建的核心部分，编译，测试，打包，部署等等。</p><ul><li><p>validate      验证项目是否正确，并且所有必要的信息可用于完成构建过程</p></li><li><p>initialize    建立初始化状态，例如设置属性</p></li><li><p>generate-sources</p></li><li><p>process-sources </p></li><li><p>generate-resources</p></li><li><p>process-resources     复制并处理资源文件，至目标目录，准备打包。</p></li><li><p>compile     编译项目的源代码。</p></li><li><p>process-classes</p></li><li><p>generate-test-sources</p></li><li><p>process-test-sources </p></li><li><p>generate-test-resources</p></li><li><p>process-test-resources     复制并处理资源文件，至目标测试目录。</p></li><li><p>test-compile     编译测试源代码。</p></li><li><p>process-test-classes</p></li><li><p>test     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</p></li><li><p>prepare-package</p></li><li><p>package     提取编译后的代码，并在其分发格式打包，如JAR，WAR或EAR文件</p></li><li><p>pre-integration-test     完成执行集成测试之前所需操作。例如，设置所需的环境</p></li><li><p>integration-test</p></li><li><p>post-integration-test     完成集成测试已全部执行后所需操作。例如，清理环境</p></li><li><p>verify        运行任何检查，验证包是有效的，符合质量审核规定</p></li><li><p>install     将包安装至本地仓库，以让其它项目依赖。</p></li><li><p>deploy     将最终的包复制到远程的仓库，以让其它开发人员与项目共享    </p></li></ul><h3 id="Site-Lifecycle"><a href="#Site-Lifecycle" class="headerlink" title="Site Lifecycle"></a>Site Lifecycle</h3><p>生成项目报告，站点，发布站点。</p><ul><li><p>pre-site     执行一些需要在生成站点文档(html)之前完成的工作</p></li><li><p>site     生成项目信息的站点文档</p></li><li><p>post-site     执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p></li><li><p>site-deploy     将生成的站点文档部署到特定的服务器上</p></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="http://blog.sina.com.cn/s/blog_e01142dc0102wup3.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_e01142dc0102wup3.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;maven生命周期&quot;&gt;&lt;a href=&quot;#maven生命周期&quot; class=&quot;headerlink&quot; title=&quot;maven生命周期&quot;&gt;&lt;/a&gt;maven生命周期&lt;/h2&gt;&lt;p&gt;maven抽象出了3套生命周期，其具体实现是依赖于&lt;a href=&quot;http://m
      
    
    </summary>
    
      <category term="工具学习" scheme="http://yangyuanming.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="maven" scheme="http://yangyuanming.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/maven/"/>
    
    
      <category term="maven生命周期" scheme="http://yangyuanming.com/tags/maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="maven插件" scheme="http://yangyuanming.com/tags/maven%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>maven常用构建命令及库的概念</title>
    <link href="http://yangyuanming.com/post/fcecdefc.html"/>
    <id>http://yangyuanming.com/post/fcecdefc.html</id>
    <published>2018-07-22T11:42:00.000Z</published>
    <updated>2018-07-24T02:28:14.722Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="maven常用构建命令"><a href="#maven常用构建命令" class="headerlink" title="maven常用构建命令"></a>maven常用构建命令</h2><ol><li>查看maven版本：mvn -v</li><li>编译：mvn compile</li><li>打包：mvn package</li><li>测试：mvn test</li><li>删除target目录：mvn clean</li><li>安装jar包到本地仓库：mvn install  <a id="more"></a></li><li>自动建立目录结构的两种方式：</li></ol><ul><li><p>mvn archetype:generate 按指示输入信息</p></li><li><p>mvn archetype:generate<br>-DgroupId=网址+项目名<br>-DartifactId=项目名-模块名<br>-Dversion=版本号<br>-Dpackage=代码包名</p></li></ul><hr><h2 id="构件、仓库、镜像仓库"><a href="#构件、仓库、镜像仓库" class="headerlink" title="构件、仓库、镜像仓库"></a>构件、仓库、镜像仓库</h2><h3 id="构件"><a href="#构件" class="headerlink" title="构件"></a>构件</h3><p>pom.xml配置文件中的dependency，包含构件坐标等信息。</p><h3 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库(repository)"></a>仓库(repository)</h3><p>分为本地仓库和远程仓库。先去本地仓库查询构件，如果没有就去远程仓库下载。</p><blockquote><p>maven提供了一个默认的全球中央仓库，解压lib/maven-model-builder-version.jar，可以发现pom-4.0.0.xml在org/apache/maven/model下,pom-4.0.0.xml中配置了该仓库，所有项目的pom.xml都会继承该xml,默认就使用了该全球中央仓库。</p></blockquote><p><strong>中央仓库配置如下：</strong></p><pre><code class="xml">&lt;repository&gt;      &lt;id&gt;central&lt;/id&gt;      &lt;name&gt;Central Repository&lt;/name&gt;      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;      &lt;layout&gt;default&lt;/layout&gt;      &lt;snapshots&gt;        &lt;enabled&gt;false&lt;/enabled&gt;      &lt;/snapshots&gt;&lt;/repository&gt;</code></pre><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><p>配置远程仓库的镜像，所有针对原仓库的访问将转到镜像仓库，原仓库的url设置无效。</p><ul><li><p>conf/settings.xml中配置镜像仓库，镜像可以有多个。</p></li><li><p>mirror的mirrorOf不能和任何一个mirror的id相同。  </p></li><li><p>mirrorOf配置的是该镜像所匹配的远程仓库(id)。拦截对应的远程仓库，使所有针对原仓库的访问将转到镜像仓库。</p></li><li><p>mirrorOf可以配置多个值，用逗号隔开</p></li></ul><blockquote><p>默认是没有配置mirror的，为了加速构件和插件的下载速度，我配置了一个阿里云的mirror，mirrorOf配置的是central，则id是central的仓库(中央仓库)将会转到阿里云的镜像下载构件，原仓库的url设置将失效。</p></blockquote><pre><code class="xml">&lt;mirror&gt;        &lt;id&gt;nexus-aliyun&lt;/id&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;name&gt;Nexus aliyun&lt;/name&gt;        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><ul><li><p>mirrorOf的值设置</p><ul><li><p><strong>rep1</strong>:代表这个镜像仅仅针对rep1这个库。如果存在多个镜像的mirrorOf值都包含rep1，则按顺序匹配。</p></li><li><p><strong>*</strong>:代表匹配所有的库。注意maven会优先匹配mirrorOf值与仓库id完全相同的镜像。例如id为rep1的仓库会优先匹配mirrorOf也为rep1的镜像，如果没有才会匹配mirrorOf为*的镜像。</p></li><li><p><strong>*,!rep1</strong>:匹配所有的库，除了rep1 </p></li><li><p><strong>external:*</strong>:代表匹配任意不在localhost上的仓库，或不是基于文件的仓库。这个主要是看repository中的url判断的。</p></li></ul></li></ul><h3 id="更改仓库位置"><a href="#更改仓库位置" class="headerlink" title="更改仓库位置"></a>更改仓库位置</h3><blockquote><p>maven下载的构件默认放在usernanme/.m2/repository下面，其中username代表用户目录。可以在conf/settings.xml中自定义仓库的位置。</p></blockquote><ul><li>从文档注释中复制localRepository标签，粘贴，填入自定义目录</li></ul><pre><code class="xml">&lt;localRepository&gt;/Users/yuanming/maven_repo&lt;/localRepository&gt;</code></pre><ul><li>备份settings.xml到maven_repo文件夹(自定义仓库文件夹)。以后更新maven，不用重新配置settings.xml，复制一份回conf文件夹下即可。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;maven常用构建命令&quot;&gt;&lt;a href=&quot;#maven常用构建命令&quot; class=&quot;headerlink&quot; title=&quot;maven常用构建命令&quot;&gt;&lt;/a&gt;maven常用构建命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;查看maven版本：mvn -v&lt;/li&gt;
&lt;li&gt;编译：mvn compile&lt;/li&gt;
&lt;li&gt;打包：mvn package&lt;/li&gt;
&lt;li&gt;测试：mvn test&lt;/li&gt;
&lt;li&gt;删除target目录：mvn clean&lt;/li&gt;
&lt;li&gt;安装jar包到本地仓库：mvn install
    
    </summary>
    
      <category term="工具学习" scheme="http://yangyuanming.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="maven" scheme="http://yangyuanming.com/categories/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/maven/"/>
    
    
      <category term="maven构建命令" scheme="http://yangyuanming.com/tags/maven%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4/"/>
    
      <category term="maven库" scheme="http://yangyuanming.com/tags/maven%E5%BA%93/"/>
    
  </entry>
  
</feed>
